version: '3.8'

# NoSQL version

services:
  mongo:
    image: mongo:4.2
    container_name: ship-mongo
    command: --replSet ship-rs --bind_ip_all
    networks:
      - ship
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootPassword
    ports:
      - "27018:27017"
  replicator:
    container_name: ship-replicator
    build: ./replicator
    depends_on:
      - mongo
    links:
      - "mongo"
    networks:
      - ship
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_LOGIN=root
      - MONGO_PASSWORD=rootPassword
      - REPLICA_NAME=ship-rs
  api:
    container_name: ship-api
    build:
      context: .
      dockerfile: app/Api.NoSql/Dockerfile
    networks:
     - ship
    depends_on:
      - "replicator"
    links:
      - "mongo"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:3001
    ports:
      - "3001:3001"
  signal-r:
    container_name: ship-signal-r
    build:
      context: .
      dockerfile: app/SignalR/Dockerfile
    networks:
     - ship
    volumes:
      - "./src:/app/src"
    depends_on:
      - "api"
    links:
      - "api"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8082
      - WAIT_FOR_HOST=api
      - WAIT_FOR_PORT=3001
    ports:
      - "8082:8082"
  redis:
    image: redis:6.2.6
    container_name: ship-redis
    networks:
      - ship
  scheduler:
    container_name: ship-scheduler
    build:
      context: .
      dockerfile: app/Scheduler/Dockerfile
    networks:
      - ship
    depends_on:
      - "replicator"
    links:
      - "mongo"
    environment:
      - DOTNET_ENVIRONMENT=Development
networks:
  ship:
    name: ship_network

# SQL version

#services:
#  postgres:
#    image: postgres:14.2
#    container_name: ship-postgres
#    networks:
#      - ship
#    volumes:
#      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    environment:
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=pwd
#    ports:
#      - "5433:5432"
#  api:
#    container_name: ship-api
#    build:
#      context: .
#      dockerfile: app/Api.Sql/Dockerfile
#    networks:
#      - ship
#    depends_on:
#      postgres:
#        condition: service_healthy
#    command: ["dotnet", "ef", "database update"]
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - ASPNETCORE_URLS=http://+:3001
#    ports:
#      - "3001:3001"
#  redis:
#    image: redis:6.2.6
#    container_name: ship-redis
#    networks:
#      - ship
#  scheduler:
#    container_name: ship-scheduler
#    build:
#      context: .
#      dockerfile: app/Scheduler/Dockerfile
#    networks:
#      - ship
#    environment:
#      - DOTNET_ENVIRONMENT=Development
#    depends_on:
#      postgres:
#        condition: service_healthy
#networks:
#  ship:
#    name: ship